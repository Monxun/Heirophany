pipeline {
    agent any
    environment {
        PROJECT_ID = '<<Your GCP Project ID>>'
        CLUSTER_NAME = '<<Your GKE Cluster Name>>'
        LOCATION = '<<Your GKE Cluster Location>>'
        GCLOUD_CREDS=credentials('gcloud-creds')
        CLIENT_EMAIL = ''
        IMAGE_REPO = ''
        IMAGE_NAME = ''
        BUILD_ID = '0.1'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('AUTH W/ CREDENTIALS MANAGER ENVIRONMENT GCP') {
            steps {
                sh '''
                gcloud version
                gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"
                gcloud compute zones list
                '''
            }
        }
        stage("Checkout code") {
            steps {
                checkout scm
            }
        }
        stage("Initialize SubModules") {
            steps {
                sh 'git submodule update --init'
            }
        }
        stage("SonarQube Test") {
            steps {
              withSonarQubeEnv('SonarQube') {
                sh 'mvn -B -DskipTests clean package sonar:sonar'
                }
            }
        }
        stage('Build Image'){
            steps{
                // get microservice name and version from pom.xml, then build image
                sh """
                    VERSION=\$(grep -m 1 "<version>" pom.xml | awk -F'[><]' \'{print \$3}\')
                    echo \$VERSION
                    MODULE=\$(grep -m 2 "<module>" pom.xml | tail -1 | awk -F'[><]' \'{print \$3}\')
                    docker build . \
                        --build-arg NAME=\${MODULE} \
                        --build-arg VERSION=\${VERSION} \
                        --build-arg DIR=\${MODULE} \
                        -t ${IMAGE_NAME}:${BUILD_ID}
                """
            }
        }
        stage('Deploy to Repo'){
            steps{
                // add repo tag and push to aws
                sh """
                    docker tag ${IMAGE_NAME}:${BUILD_ID} ${IMAGE_REPO}/${IMAGE_NAME}:${BUILD_ID}
                    docker push ${IMAGE_REPO}/${IMAGE_NAME} --all-tags
                """
            }
        }        
    } 
    post {
        always {
            cleanWs()
            sh "mvn clean"
            sh "docker system prune -f --volumes"
            sh 'gcloud auth revoke $CLIENT_EMAIL'
        }
    }   
}
