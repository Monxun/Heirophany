// DEVOPS CI PIPELINE CODE SCAN & IMAGE BUILD
pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                containers:
                - name: maven
                    image: maven:alpine
                    command:
                    - cat
                    tty: true
                - name: node
                    image: node:16-alpine3.12
                    command:
                    - cat
                    tty: true
            '''
        }
    }
    environment {
        AWS_CREDENTIALS = credentials('aws-aline-jenkins')
        AWS_DEFAULT_REGION = '${AWS_DEFAULT_REGION}'
        IMAGE_REPO = '${AWS_IMAGE_REPO}'
        IMAGE_NAME = 'aline-bank-mg'
        BUILD_ID = '0.0.1'
    }
    stages {
        stage('Get AWS Credentials') {
            steps {
                sh """
                    aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} |\
                     docker login --username AWS --password-stdin ${IMAGE_REPO}
                """
            }
        }
        stage("Init Submodules ") {
            steps {
                checkout scm
            }
        }
        stage("Initialize SubModules") {
            steps {
                sh 'git submodule update --init'
            }
        }
        stage("SonarQube Test") {
            steps {
              withSonarQubeEnv('SonarQube') {
                sh 'mvn -B -DskipTests clean package sonar:sonar'
                }
            }
        }
        stage('Build Image'){
            steps{
                // get microservice name and version from pom.xml, then build image
                sh """
                    VERSION=\$(grep -m 1 "<version>" pom.xml | awk -F'[><]' \'{print \$3}\')
                    echo \$VERSION
                    MODULE=\$(grep -m 2 "<module>" pom.xml | tail -1 | awk -F'[><]' \'{print \$3}\')
                    docker build . \
                        --build-arg NAME=\${MODULE} \
                        --build-arg VERSION=\${VERSION} \
                        --build-arg DIR=\${MODULE} \
                        -t ${IMAGE_NAME}:${BUILD_ID}
                """
            }
        }
        stage('Deploy to ECR'){
            steps{
                // create repo if it doesn't already exist
                sh """
                    aws ecr-public create-repository --repository-name ${IMAGE_NAME} || true
                """
                // add repo tag and push to aws
                sh """
                    docker tag ${IMAGE_NAME}:${BUILD_ID} ${IMAGE_REPO}/${IMAGE_NAME}:${BUILD_ID}
                    docker push ${IMAGE_REPO}/${IMAGE_NAME} --all-tags
                """
            }
        }
        stage('Remove Local Images') {
            steps {
                echo '=== Delete the local docker images ==='
                script {
                    sh("docker rmi -f ${IMAGE_REPO}/${IMAGE_NAME}:${BUILD_ID} || :")
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh "mvn clean"
            sh "docker system prune -f --volumes"
        }
    }
}