// DEVOPS CI PIPELINE CODE SCAN & IMAGE BUILD
pipeline {
    agent {
        kubernetes {
            // USE JENKINS-SONARQUBE AGENT IMAGE + MAVEN
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                containers:
                - name: jenkins-sonarqube-agent
                    image: us-east1-docker.pkg.dev/aline-jenkins-gcp/nightwalkers-images/jenkins-sonarqube-agent:0.0.1
                    command:
                    - cat
                    tty: true
            '''
        }
    }
    environment {
        // CONFIGURATION VARIABLES
        CLOUD_PROVIDER = 'GCP/AWS'
        IMAGE_REPO = '${AWS_IMAGE_REPO}'
        IMAGE_NAME = 'aline-bank-mg'
        BUILD_ID = '0.0.1'
    
        // AWS VARIABLES
        AWS_CREDENTIALS = credentials('aws-aline-jenkins')
        AWS_DEFAULT_REGION = '${AWS_DEFAULT_REGION}'

        // GCP VARIABLES
        GCLOUD_CREDS=credentials('gcp-aline-jenkins')
        PPROJECT_ID = '${GCP_PROJECT_ID}'
        LOCATION = '${GCP_GKE_LOCATION}'
        IMAGE_REPO_REGION = '${GCP_IMAGE_REPO_REGION}'
        CLIENT_EMAIL = '${GCP_CLIENT_EMAIL}'
    }
    stages {
        stage('SET BRANCH ENV') {
            // DETECTS BRANCH FOR USE IN IMAGE NAME
            when {
                branch 'dev'
            }
            steps {
                sh """
                    export BUILD_BRANCH='dev'
                """
            }
            when {
                branch 'stage'
            }
            steps {
                sh """
                    export BUILD_BRANCH='stage'
                """
            }
            when {
                branch 'prod'
            }
            steps {
                sh """
                    export BUILD_BRANCH='prod'
                """
            }
        }
        stage('PROVIDER AUTHENTICATION') {
            when {
                environment name: 'CLOUD_PROVIDER', value: 'AWS'
            }
            steps {
                sh """
                    aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} |\
                    docker login --username AWS --password-stdin ${IMAGE_REPO}
                """
            }
            when {
                environment name: 'CLOUD_PROVIDER', value: 'GCP'
            }
            steps {
                sh '''
                    gcloud version
                    gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"
                    gcloud auth configure-docker ${IMAGE_REPO_REGION}-docker.pkg.dev
                    gcloud compute zones list
                    gcloud config set project "${PROJECT_ID}"
                '''
            }
        }
        stage("Init Submodules ") {
            steps {
                checkout scm
            }
        }
        stage("Initialize SubModules") {
            steps {
                sh 'git submodule update --init'
            }
        }
        stage("SonarQube Test") {
            steps {
              withSonarQubeEnv('SonarQube') {
                sh 'mvn -B -DskipTests clean package sonar:sonar'
                }
            }
        }
        stage('Build Image'){
            steps{
                // get microservice name and version from pom.xml, then build image
                sh """
                    VERSION=\$(grep -m 1 "<version>" pom.xml | awk -F'[><]' \'{print \$3}\')
                    echo \$VERSION
                    MODULE=\$(grep -m 2 "<module>" pom.xml | tail -1 | awk -F'[><]' \'{print \$3}\')
                    docker build . \
                        --build-arg NAME=\${MODULE} \
                        --build-arg VERSION=\${VERSION} \
                        --build-arg DIR=\${MODULE} \
                        -t ${BUILD_BRANCH}-${IMAGE_NAME}:${BUILD_ID}
                """
            }
        }
        stage('PUSH IMAGE TO REPO') {
            when {
                environment name: 'CLOUD_PROVIDER', value: 'AWS'
            }
            steps {
                // create ECR repo if it doesn't already exist
                sh """
                    aws ecr-public create-repository --repository-name ${BUILD_BRANCH}-${IMAGE_NAME} || true
                """
                // add repo tag and push to aws
                sh """
                    docker tag ${BUILD_BRANCH}-${IMAGE_NAME}:${BUILD_ID} ${IMAGE_REPO}/${BUILD_BRANCH}-${IMAGE_NAME}:${BUILD_ID}
                    docker push ${IMAGE_REPO}/${BUILD_BRANCH}-${IMAGE_NAME} --all-tags
                """
            }
            when {
                environment name: 'CLOUD_PROVIDER', value: 'GCP'
            }
            steps {
                sh """
                    docker tag ${IMAGE_NAME}:${BUILD_ID} ${IMAGE_REPO}/${IMAGE_NAME}:${BUILD_ID}
                    docker push ${IMAGE_REPO}/${BUILD_BRANCH}-${IMAGE_NAME} --all-tags
                """
            }
            
        }
        stage('DEPLOY') {
            // DETECTS BRANCH FOR USE IN IMAGE NAME
            when {
                branch 'dev'
            }
            steps {
                sh """
                    // DEPLOY TO ECS
                """
            }
            when {
                branch 'stage'
            }
            steps {
                sh """
                    // DEPLOY TO CLUSTER NS: STAGE
                """
            }
            when {
                branch 'prod'
            }
            steps {
                sh """
                    // DEPLOY TO CLUSTER NS: STAGE
                """
            }
        }
        stage('Remove Local Images') {
            steps {
                echo '=== Delete the local docker images ==='
                script {
                    sh("docker rmi -f ${IMAGE_REPO}/${BUILD_BRANCH}-${IMAGE_NAME}:${BUILD_ID} || :")
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh "mvn clean"
            sh "docker system prune -f --volumes"
        }
    }
}