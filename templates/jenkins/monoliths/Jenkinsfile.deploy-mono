// DEVOPS CI PIPELINE CODE SCAN & IMAGE BUILD
pipeline {
    agent {
        kubernetes {
            // USE JENKINS-ANSIBLE-TERRAFORM AGENT IMAGE 
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                containers:
                - name: maven
                    image: maven:alpine
                    command:
                    - cat
                    tty: true
                - name: node
                    image: node:16-alpine3.12
                    command:
                    - cat
                    tty: true
            '''
        }
    }google-cloud-cli-384.0.1-linux-x86_64.tar.gz
    environment {
        // CONFIGURATION VARIABLES
        // CLOUD_PROVIDER = 'GCP/AWS'
        IMAGE_REPO = '${GCP_IMAGE_REPO}'
        BUILD_ID = '0.0.1'

        // AWS VARIABLES
        AWS_CREDENTIALS = credentials('aws-aline-jenkins')
        AWS_DEFAULT_REGION = '${AWS_DEFAULT_REGION}'

        // GCP VARIABLES
        GCLOUD_CREDS=credentials('gcp-aline-jenkins')
        PPROJECT_ID = '${GCP_PROJECT_ID}'
        LOCATION = '${GCP_GKE_LOCATION}'
        CLIENT_EMAIL = '${GCP_CLIENT_EMAIL}'

        // ECS VARIABLES
        POM_VERSION = getVersion()
        JAR_NAME = getJarName()
        AWS_ECR_REGION = 'eu-west-1'
        AWS_ECS_SERVICE = 'ch-dev-user-api-service'
        AWS_ECS_TASK_DEFINITION = 'ch-dev-user-api-taskdefinition'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'ch-dev'
        AWS_ECS_TASK_DEFINITION_PATH = './ecs/container-definition-update-image.json'
    }
    stages {
        stage('PROVIDER AUTHENTICATION') {
            when {
                environment name: 'CLOUD_PROVIDER', value: 'AWS'
            }
            steps {
                sh """
                    aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} |\
                    docker login --username AWS --password-stdin ${IMAGE_REPO}
                """
            }
            when {
                environment name: 'CLOUD_PROVIDER', value: 'GCP'
            }
            steps {
                sh '''
                    gcloud version
                    gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"
                    gcloud compute zones list
                    gcloud config set project "${PROJECT_ID}"
                '''
            }
        }
        stage('DEPLOY') {
            // DETECTS BRANCH FOR USE IN IMAGE NAME
            when {
                branch 'dev'
                environment name: 'CLOUD_PROVIDER', value: 'AWS'
                environment name: 'DEPLOYMENT', value: true
            }
            steps {
                // DEPLOY TO ECS
                sh """
                    docker --version
                    docker compose version 
                    docker context create ecs dev-aline

                    /usr/local/bin/aws ecs register-task-definition --region ${AWS_ECR_REGION} --family ${AWS_ECS_TASK_DEFINITION} --execution-role-arn ${AWS_ECS_EXECUTION_ROL} --requires-compatibilities ${AWS_ECS_COMPATIBILITY} --network-mode ${AWS_ECS_NETWORK_MODE} --cpu ${AWS_ECS_CPU} --memory ${AWS_ECS_MEMORY} --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}
                    def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true
                    /usr/local/bin/aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskRevision}"
                """
            }
            when {
                environment name: 'DEPLOYMENT', value: true
            }
            steps {
                // DEPLOY
                sh """
                    build job: 'provision-aline', parameters: [string(name: 'CLOUD_PROVIDER', value: env.CLOUD_PROVIDER), string(name: 'BUILD_BRANCH', value: env.BUILD_BRANCH), string(name: 'DEPLOYMENT_TYPE', value: env.DEPLOYMENT_TYPE)]
                """
            }
            when {
                environment name: 'CLOUD_PROVIDER', value: 'AWS'
                environment name: 'DEPLOYMENT_TYPE', value: 'EKS'
                environment name: 'DEPLOYMENT', value: true
            }
            steps {
                // DEPLOY TO EKS CLUSTER
                sh """
                    build job: 'provision-aline', parameters: [string(name: 'CLOUD_PROVIDER', value: env.CLOUD_PROVIDER), string(name: 'BUILD_BRANCH', value: env.BUILD_BRANCH), string(name: 'DEPLOYMENT_TYPE', value: env.DEPLOYMENT_TYPE)]
                """
            }
            when {
                environment name: 'CLOUD_PROVIDER', value: 'GCP'
                environment name: 'DEPLOYMENT_TYPE', value: 'GKE'
                environment name: 'DEPLOYMENT', value: true
            }
            steps {
                // DEPLOY TO CLUSTER
                sh """
                    build job: 'provision-aline', parameters: [string(name: 'CLOUD_PROVIDER', value: env.CLOUD_PROVIDER), string(name: 'BUILD_BRANCH', value: env.BUILD_BRANCH), string(name: 'DEPLOYMENT_TYPE', value: env.DEPLOYMENT_TYPE)]
                """
            }
        }
    }
    post {
        always {
            cleanWs()
            sh "docker system prune -f --volumes"
        }
    }
}