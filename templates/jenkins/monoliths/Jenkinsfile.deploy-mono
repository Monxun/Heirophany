// DEVOPS CI PIPELINE CODE SCAN & IMAGE BUILD
pipeline {
    agent {
        kubernetes {
            // USE JENKINS-ANSIBLE-TERRAFORM AGENT IMAGE 
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                containers:
                - name: cloud-cli
                  image: heirophany/cloud-cli:0.0.2
                  command:
                  - cat
                  tty: true
                  volumeMounts:
                  - mountPath: /var/run/docker.sock
                    name: docker-sock
                - name: terraform
                    image: hashicorp/terraform:0.12.13
                    command:
                    - cat
                    tty: true
                - name: ansible
                    image: core.harbor.example.com/jenkins/ansible:2.9
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                    - mountPath: "/etc/ssh-key"
                    name: ssh-key
                    readOnly: true
                volumes:
                - name: docker-sock
                    hostPath:
                        path: /var/run/docker.sock
                - name: ssh-key
                    secret:
                    secretName: ansible-ssh-key
                    defaultMode: 256
            '''
        }
    }
    environment {
        // CREDENTIALS
        AWS_CREDENTIALS = credentials('aws-aline-jenkins')
        GCLOUD_CREDS=credentials('gcp-aline-jenkins')
        SONARQUBE_CREDS = credentials('sonarqube-token')

        // CONFIGURATION VARIABLES
        IMAGE_REPO = '${GCP_IMAGE_REPO}'
        BUILD_ID = '0.0.1'

        // AWS VARIABLES
        AWS_DEFAULT_REGION = '${AWS_DEFAULT_REGION}'

        // GCP VARIABLES
        DEPLOYMENT_PROJECT_ID = '${GCP_DEPLOYMENT_PROJECT_ID}'
        LOCATION = '${GCP_GKE_LOCATION}'
        CLIENT_EMAIL = '${GCP_CLIENT_EMAIL}'

        // DEPLOYMENT SCHEMA /////////////////////////////////

        // DEV
        DEV_ACTIVE = 'true'
        DEV_CLOUD_PROVIDER = 'GCP'
        DEV_DEPLOYMENT_TYPE = 'ECS'
        DEV_NAMESPACE = 'dev'
        // STAGE
        STAGE_ACTIVE = 'false'
        STAGE_CLOUD_PROVIDER = 'GCP'
        STAGE_DEPLOYMENT_TYPE = ' GKE'
        STAGE_NAMESPACE = 'stage'
        // PROD
        PROD_ACTIVE = 'false'
        PROD_CLOUD_PROVIDER = 'GCP'
        PROD_DEPLOYMENT_TYPE = 'GKE'
        PROD_NAMESPACE = 'prod'

        // AWS DEPLOYMENTS /////////////////////////////////

        // ECS VARIABLES
        POM_VERSION = getVersion()
        JAR_NAME = getJarName()
        AWS_ECR_REGION = 'eu-west-1'
        AWS_ECS_SERVICE = 'ch-dev-user-api-service'
        AWS_ECS_TASK_DEFINITION = 'ch-dev-user-api-taskdefinition'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'ch-dev'
        AWS_ECS_TASK_DEFINITION_PATH = './ecs/container-definition-update-image.json'
        // EKS VARIABLES


        // GCP DEPLOYMENTS /////////////////////////////////

        // GCE VARIABLES
        // GKE VARIABLES
    }
    stages {
        stage('DEPLOY DEV') {
            // DETECTS BRANCH FOR USE IN IMAGE NAME
            when { 
                environment name: 'DEV_ACTIVE', value: 'true'
                environment name: 'BUILD_BRANCH_NAME', value: 'dev'
            }
            steps {
                container('cloud-cli') {
                    sh """
                    #!/bin/bash

                    if [[ $DEV_CLOUD_PROVIDER -eq 'AWS' ]]
                    then
                        echo 'DEPLOYING TO AMAZON ECS VIA DOCKER COMPOSE'

                        echo 'AUTHENTICATING...'
                        aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} |\
                        docker login --username AWS --password-stdin ${IMAGE_REPO}

                        echo 'GETTING SECRETS...'

                        echo 'CHECKING INFRASTRUCTURE...'

                        echo 'CREATING ECS CONTEXT...'
                        docker compose version 
                        docker context create ecs dev-aline

                        echo 'CREATING ECS TASK DEFINITION / SERVICE...'
                        /usr/local/bin/aws ecs register-task-definition --region ${AWS_ECR_REGION} --family ${AWS_ECS_TASK_DEFINITION} --execution-role-arn ${AWS_ECS_EXECUTION_ROL} --requires-compatibilities ${AWS_ECS_COMPATIBILITY} --network-mode ${AWS_ECS_NETWORK_MODE} --cpu ${AWS_ECS_CPU} --memory ${AWS_ECS_MEMORY} --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}
                        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true
                        /usr/local/bin/aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskRevision}"
                    
                        echo 'DEPLOYING...'

                        echo 'SUCCESS!' 
                        echo 'AWS/ECS DEPLOYMENT'

                    else
                        echo 'DEPLOYING TO GOOGLE GCE VIA CLOUDCONFIG/CLOUDBUILD'

                        echo 'AUTHENTICATING...'
                        gcloud version
                        gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"
                        gcloud compute zones list
                        gcloud config set project "${DEPLOYMENT_PROJECT_ID}"

                        echo 'GETTING SECRETS...'

                        echo 'CHECKING INFRASTRUCTURE...'

                    fi
                """
            }
        }
    }
}